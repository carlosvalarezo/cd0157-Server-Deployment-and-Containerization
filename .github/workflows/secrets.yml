name: Generate KMS (Key Management System) and store the ARN

on:
  push:
    branches:
      - secrets

jobs:
  generate_kms_key:
    runs-on: ubuntu-latest
    environment:
        name: develop
    env:
        GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_TRUST_OWNERS: ${{ secrets.GPG_TRUST_OWNERS }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        RECIPIENT_ID: ${{ secrets.RECIPIENT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup the runner
        run: sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-install.sh

      - name: Setup gpg agent
        run: sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-agent.sh

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate KMS key and save it as artifact
        run: |
          KVM_KEY_ID=$(aws kms create-key --query KeyMetadata.KeyId --output text)
          KVM_KEY_ARN=$(aws kms describe-key --key-id $KVM_KEY_ID --query KeyMetadata.Arn --output text)
          echo ${KVM_KEY_ARN} >> ${GITHUB_WORKSPACE}/arn

      - name: Encrypts the arn file
        run: gpg --encrypt -r ${RECIPIENT_ID} --output arn.gpg ${GITHUB_WORKSPACE}/arn

      - name: Pushes arn as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: arn.gpg
          path: arn.gpg

  store_cloudformation_secrets:
    runs-on: ubuntu-latest
    needs: generate_kms_key
    environment:
        name: develop
    env:
        GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_TRUST_OWNERS: ${{ secrets.GPG_TRUST_OWNERS }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        GITHUB_USER: ${{ vars.GH_USER }}
        SOURCE_REPOSITORY: ${{ vars.SOURCE_REPOSITORY }}
        RECIPIENT_ID: ${{ secrets.RECIPIENT_ID }}
        CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup the runner
        run: sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-install.sh

      - name: Setup gpg agent
        run: sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-agent.sh

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get the KVM ARN as artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: arn.gpg

      - name: Decrypt arn
        run: echo ${GPG_PASSPHRASE} | gpg --batch --yes --passphrase-fd 0 --output ${GITHUB_WORKSPACE}/arn --decrypt arn.gpg

      - name: Saves the secrets in ssm to be used by cloudformation template
        run: |
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "GITHUB_TOKEN" --value ${GITHUB_TOKEN} --type "SecureString" --key-id "${KEY_ID}" --overwrite
          aws ssm put-parameter --region ${AWS_REGION} --name "CLUSTER_NAME" --value ${CLUSTER_NAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite
          aws ssm put-parameter --region ${AWS_REGION} --name "GITHUB_USER" --value ${GITHUB_USER} --type "SecureString" --key-id "${KEY_ID}" --overwrite
          aws ssm put-parameter --region ${AWS_REGION} --name "SOURCE_REPOSITORY" --value ${SOURCE_REPOSITORY} --type "SecureString" --key-id "${KEY_ID}" --overwrite
          aws ssm put-parameter --region ${AWS_REGION} --name "DOCKER_USERNAME" --value ${DOCKER_USERNAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite
          aws ssm put-parameter --region ${AWS_REGION} --name "DOCKER_TOKEN" --value ${DOCKER_TOKEN} --type "SecureString" --key-id "${KEY_ID}" --overwrite
