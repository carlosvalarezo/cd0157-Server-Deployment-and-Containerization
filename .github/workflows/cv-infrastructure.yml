name: Create AWS infrastructure
on:
  push:
    branches:
      - infrastructure
jobs:
  setup_roles_and_policies:
    if: false
    runs-on: ubuntu-latest
    environment:
      name: develop
    env:
      CLUSTER_ROLE_NAME: ${{ vars.CLUSTER_ROLE_NAME }}
      CLUSTER_POLICY_NAME: ${{ vars.CLUSTER_POLICY_NAME }}
      NODEGROUP_ROLE_NAME: ${{ vars.NODEGROUP_ROLE_NAME }}
      NODEGROUP_POLICY_NAME: ${{ vars.NODEGROUP_POLICY_NAME }}
      CODEPIPELINE_ROLE_NAME: ${{ vars.CODEPIPELINE_ROLE_NAME }}
      CODEPIPELINE_POLICY_NAME: ${{ vars.CODEPIPELINE_POLICY_NAME }}
      CODEBUILD_ROLE_NAME: ${{ vars.CODEBUILD_ROLE_NAME }}
      CODEBUILD_POLICY_NAME: ${{ vars.CODEBUILD_POLICY_NAME }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_TRUST_OWNERS: ${{ secrets.GPG_TRUST_OWNERS }}
      WORKFLOW_NAME: secrets.yml
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup gpg agent
        run: sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-agent.sh

      - name: Import the gpg components
        run: |
          echo ${GPG_TRUST_OWNERS} | base64 --decode > trust-file
          gpg --import-ownertrust < trust-file
          echo ${GPG_PUBLIC_KEY} | base64 --decode | gpg --import
          echo ${GPG_PRIVATE_KEY} | base64 --decode | gpg --import --batch

      - name: Download the ARN KVM as artifact
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          RUN_ID=$(gh run list --workflow ${WORKFLOW_NAME} --json databaseId --jq .[0].databaseId)
          gh run download ${RUN_ID} --dir ${GITHUB_WORKSPACE}/artifacts -n arn.gpg

      - name: Decrypt artifact
        run: echo ${GPG_PASSPHRASE} | gpg --batch --yes --passphrase-fd 0 --output ${GITHUB_WORKSPACE}/arn --decrypt ${GITHUB_WORKSPACE}/artifacts/arn.gpg

      - name: Creates the role that will assume the trust policy to deal with the cluster
        run: |
          ROLE_ID=$(aws iam create-role --role-name ${CLUSTER_ROLE_NAME} --assume-role-policy-document file://${GITHUB_WORKSPACE}/eksk8s/eks-cluster-trust-policy.json --query KeyMetadata.Arn --output text)
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "CLUSTER_ROLE_NAME" --value ${CLUSTER_ROLE_NAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite

      - name: Attaches the policy to the cluster role
        run: aws iam put-role-policy --role-name ${CLUSTER_ROLE_NAME} --policy-name ${CLUSTER_POLICY_NAME} --policy-document file://${GITHUB_WORKSPACE}/eksk8s/eks-cluster-policy.json --query KeyMetadata.Arn --output text

      - name: Creates the role that will assume the trust policy to deal with the node-group
        run: |
          ROLE_ID=$(aws iam create-role --role-name ${NODEGROUP_ROLE_NAME} --assume-role-policy-document file://${GITHUB_WORKSPACE}/eksk8s/eks-nodegroup-trust-policy.json --query KeyMetadata.Arn --output text)
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "NODEGROUP_ROLE_NAME" --value ${NODEGROUP_ROLE_NAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite

      - name: Attaches the policy for the node-group role
        run: aws iam put-role-policy --role-name ${NODEGROUP_ROLE_NAME} --policy-name ${NODEGROUP_POLICY_NAME} --policy-document file://${GITHUB_WORKSPACE}/eksk8s/eks-nodegroup-policy.json --query KeyMetadata.Arn --output text

      - name: Create the role that will assume the trust policy to deal with the codepipeline service
        run: |
          ROLE_ID=$(aws iam create-role --role-name ${CODEPIPELINE_ROLE_NAME} --assume-role-policy-document file://${GITHUB_WORKSPACE}/eksk8s/codepipeline-trust-policy.json --query KeyMetadata.Arn --output text)
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "CODEPIPELINE_ROLE_NAME" --value ${CODEPIPELINE_ROLE_NAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite

      - name: Attaches the policy for the codepipeline role
        run: aws iam put-role-policy --role-name ${CODEPIPELINE_ROLE_NAME} --policy-name ${CODEPIPELINE_POLICY_NAME} --policy-document file://${GITHUB_WORKSPACE}/eksk8s/codepipeline-policy.json

      - name: Create the role that will assume the trust policy to deal with the codebuild service
        run: |
          ROLE_ID=$(aws iam create-role --role-name ${CODEBUILD_ROLE_NAME} --assume-role-policy-document file://${GITHUB_WORKSPACE}/eksk8s/codebuild-trust-policy.json --query KeyMetadata.Arn --output text)
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "CODEPIPELINE_ROLE_NAME" --value ${CODEPIPELINE_ROLE_NAME} --type "SecureString" --key-id "${KEY_ID}" --overwrite

      - name: Attaches the policy for the codebuild role
        run: aws iam put-role-policy --role-name ${CODEBUILD_ROLE_NAME} --policy-name ${CODEBUILD_ROLE_NAME} --policy-document file://${GITHUB_WORKSPACE}/eksk8s/codebuild-policy.json

  create_the_cluster:
    runs-on: ubuntu-latest
    needs: setup_roles_and_policies
    environment:
      name: develop
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_TRUST_OWNERS: ${{ secrets.GPG_TRUST_OWNERS }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      RECIPIENT_ID: ${{ secrets.RECIPIENT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup the runner
        run: |
          sh ${GITHUB_WORKSPACE}/.github/scripts/eksctl-install.sh
          sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-install.sh

      - name: Setup the keys to stablish connection between nodes in the k8s cluster
        run: |
          mkdir ${HOME}/.ssh/
          echo ${SSH_PRIVATE_KEY} > ${HOME}/.ssh/k8s
          echo ${SSH_PUBLIC_KEY} > ${HOME}/.ssh/k8s.pub

      - name: Import the gpg components
        run: |
          echo ${GPG_TRUST_OWNERS} | base64 --decode > trust-file
          gpg --import-ownertrust < trust-file
          echo ${GPG_PUBLIC_KEY} | base64 --decode | gpg --import
          echo ${GPG_PRIVATE_KEY} | base64 --decode | gpg --import --batch

      - name: Download the ARN KVM as artifact
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          RUN_ID=$(gh run list --workflow ${WORKFLOW_NAME} --json databaseId --jq .[0].databaseId)
          gh run download ${RUN_ID} --dir ${GITHUB_WORKSPACE}/artifacts -n arn.gpg
  
      - name: Decrypt artifact
        run: echo ${GPG_PASSPHRASE} | gpg --batch --yes --passphrase-fd 0 --output ${GITHUB_WORKSPACE}/arn --decrypt ${GITHUB_WORKSPACE}/artifacts/arn.gpg

      - name: Creates fake kubeconfig file
        run: |
          mkdir ${HOME}/.kube/
          cat << EOF > ${HOME}/.kube/config
          Line1
          EOF

      - name: Creates the k8s cluster using eksctl
        if: false
        run: eksctl create cluster -f ${GITHUB_WORKSPACE}/eksk8s/cluster-config.yaml

      - name: Saves the kubeconfig as ssm value
        run: |
          base64 ${HOME}/.kube/config > ${GITHUB_WORKSPACE}/kube_encoded
          KUBE_CONFIG=$(cat ${GITHUB_WORKSPACE}/kube_encoded)
          export KEY_ID=$(cat ${GITHUB_WORKSPACE}/arn)
          aws ssm put-parameter --region ${AWS_REGION} --name "KUBE_CONIFG" --value ${KUBE_CONFIG} --type "SecureString" --key-id "${KEY_ID}" --overwrite

      - name: Encrypts the kubeconfig file
        run: gpg --encrypt -r ${RECIPIENT_ID} --output kube_config.gpg ${HOME}/.kube/config

      - name: Pushes kubeconfig artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: kube_config.gpg
          path: ${{ github.workspace }}
