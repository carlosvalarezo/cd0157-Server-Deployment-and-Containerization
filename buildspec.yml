---
version: 0.2


phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      - sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - chmod +x kubectl
      - mkdir -p ~/.local/bin
      - mv ./kubectl ~/.local/bin/kubectl
      - echo "kubectl installed!!!\nGet kube config"
      - mkdir $HOME/.kube/
      - echo $KUBE_CONFIG > $HOME/.kube/config
      - echo '--------------'
      - echo $KUBE_CONFIG
      - echo '--------------'
      - echo "kube config already setup!"
      - echo "Getting the kube config file"
      - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
      - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
      - aws configure set default.region ${AWS_REGION}
      - aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}
      - cat ${HOME}/.kube/config
      - kubectl get -n kube-system configmap/aws-auth -o yaml > new-aws-auth-patch.yml
      - mv new-aws-auth-patch.yml aws-auth-patch.yml
      - kubectl patch configmap/aws-auth -n kube-system --patch "$(cat aws-auth-patch.yml)"
      - python -m pip install --upgrade --force pip
      - apt-get update && apt-get -y install jq  && pip install --upgrade awscli
  pre_build:
      commands:
        - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
        - sed -i 's@CONTAINER_IMAGE@'"${DOCKER_USERNAME}:${TAG}"'@' simple_jwt_api.yml
  build:
    commands:
      - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_TOKEN}
      - docker build --tag ${DOCKER_USERNAME}:${TAG} .
      - docker push ${DOCKER_USERNAME}:${TAG}
      - docker run -e JWT_SECRET=my-super-secret -e LOG_LEVEL=DEBUG -p 8080:8080 --entrypoint 'pytest' ${DOCKER_USERNAME}:$TAG

  post_build:
    commands:
      - kubectl apply -f simple_jwt_api.yml 
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files: build.json
env:
  parameter-store:         
    JWT_SECRET: JWT_TOKEN
    LOG_LEVEL: LOG_LEVEL